import streamlit as st
import os
import sqlite3
from PIL import Image
import pandas as pd
import re
from datetime import datetime, date

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ ---

if os.path.exists("/app/data"):  # –í Docker
    DATA_DIR = "/app/data"
else:  # –õ–æ–∫–∞–ª—å–Ω–æ
    DATA_DIR = os.path.join(os.path.dirname(__file__), "data")

DB_PATH = os.path.join(DATA_DIR, "documents.db")
ETALON_FOLDER = os.path.join(DATA_DIR, "–±–∞—Ç—á–∏–Ω–≥-—Ç–µ—Å—Ç", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ", "–≠—Ç–∞–ª–æ–Ω")
COMPARED_FOLDER = os.path.join(DATA_DIR, "–±–∞—Ç—á–∏–Ω–≥-—Ç–µ—Å—Ç", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ", "–ü—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ")
IMAGES_FOLDER = os.path.join(DATA_DIR, "images")  # –ü–∞–ø–∫–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –∑–∞—è–≤–æ–∫

# --- –§—É–Ω–∫—Ü–∏–∏ ---

def extract_number(filename):
    match = re.match(r"(\d+)", filename)
    return int(match.group(1)) if match else float('inf')

def show_application_card(app_data):
    st.markdown("---")
    st.header(f"–ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞—è–≤–∫–∏ {app_data['application_number']}")
    st.write(f"**–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:** {app_data['application_number']}")
    st.write(f"**–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:** {app_data['application_date']}")
    st.write(f"**–ü—É–±–ª–∏–∫–∞—Ü–∏—è:** {app_data['publication']}")
    st.write(f"**–ù–æ–º–µ—Ä –±—é–ª–ª–µ—Ç–µ–Ω—è:** {app_data['bulletin_number']}")
    st.write(f"**–ó–∞—è–≤–∏—Ç–µ–ª—å:** {app_data['applicant']}")
    st.write(f"**–ê–¥—Ä–µ—Å:** {app_data['correspondence_address']}")
    st.write(f"**–ö–ª–∞—Å—Å—ã –ú–ö–¢–£:** {app_data['classes']}")
    if st.button("–ó–∞–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É"):
        st.session_state.selected_app = None
        st.experimental_rerun()

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---

st.title("üîç –õ–æ–≥–æ—Ç–∏–ø—ã –∏ –∑–∞—è–≤–∫–∏")

tabs = st.tabs(["–í–∏–∑—É–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ", "–ü–æ–∏—Å–∫ –ø–æ –∑–∞—è–≤–∫–∞–º"])

with tabs[0]:
    etalon_files = [f for f in os.listdir(ETALON_FOLDER) if f.lower().endswith((".jpg", ".jpeg", ".png"))]
    etalon_files.sort(key=extract_number)

    selected_etalon = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ª–æ–Ω", etalon_files)

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        SELECT compared, similarity
        FROM clip_similarity
        WHERE etalon = ?
        ORDER BY similarity DESC
        LIMIT 30
    """, (selected_etalon,))
    top_matches = cursor.fetchall()
    conn.close()

    df = pd.DataFrame(top_matches, columns=["–§–∞–π–ª", "–°—Ö–æ–¥—Å—Ç–≤–æ"])
    df.insert(0, "Top", [f"Top {i+1}" for i in range(len(df))])
    select_options = [f"{row.Top} ‚Äî {row.–§–∞–π–ª}" for _, row in df.iterrows()]
    selected_option = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –∏–∑ —Å–ø–∏—Å–∫–∞", select_options)
    selected_file = selected_option.split(" ‚Äî ", 1)[1]

    col1, col2 = st.columns(2)
    with col1:
        etalon_path = os.path.join(ETALON_FOLDER, selected_etalon)
        st.subheader("üéØ –≠—Ç–∞–ª–æ–Ω")
        st.image(etalon_path, caption=selected_etalon, width=300)
    with col2:
        if selected_file:
            image_path = os.path.join(COMPARED_FOLDER, selected_file)
            try:
                image = Image.open(image_path)
                st.subheader("ü§ù –ü–æ—Ö–æ–∂–∏–π –ª–æ–≥–æ—Ç–∏–ø")
                st.image(image, caption=selected_file, width=300)
            except Exception:
                st.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

    st.subheader("üìã –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Ö–æ–∂–∏—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤ (—Ç–æ–ø 5)")
    st.dataframe(df.head(5), use_container_width=True)

with tabs[1]:
    st.title("üîé –ü–æ–∏—Å–∫ –ø–æ –∑–∞—è–≤–∫–∞–º –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤")

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute("SELECT classes FROM documents_pdf")
    all_classes_raw = [row[0] for row in cursor.fetchall()]
    unique_classes = set()
    for cl_str in all_classes_raw:
        unique_classes.update([c.strip() for c in cl_str.split(",") if c.strip()])
    unique_classes = sorted(unique_classes)

    cursor.execute("SELECT MIN(application_date), MAX(application_date) FROM documents_pdf")
    min_date_str, max_date_str = cursor.fetchone()

    def str_to_date(s):
        try:
            return datetime.strptime(s, "%d.%m.%Y").date()
        except Exception:
            return None

    min_date = str_to_date(min_date_str) or date.today()
    max_date = str_to_date(max_date_str) or date.today()

    selected_dates = st.date_input(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω)",
        value=(min_date, max_date),
        min_value=min_date,
        max_value=max_date
    )

    selected_classes = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å—ã –ú–ö–¢–£", unique_classes)

    query = "SELECT application_number, application_date, publication, bulletin_number, applicant, correspondence_address, classes FROM documents_pdf WHERE 1=1"
    params = []

    if selected_dates and len(selected_dates) == 2:
        start_date, end_date = selected_dates
        start_str = start_date.strftime("%d.%m.%Y")
        end_str = end_date.strftime("%d.%m.%Y")
        query += " AND (application_date BETWEEN ? AND ?)"
        params.extend([start_str, end_str])

    if selected_classes:
        like_clauses = []
        for cl in selected_classes:
            like_clauses.append("classes LIKE ?")
            params.append(f"%{cl}%")
        query += " AND (" + " OR ".join(like_clauses) + ")"

    query += " ORDER BY application_date DESC LIMIT 100"

    cursor.execute(query, params)
    rows = cursor.fetchall()
    conn.close()

    all_apps = {row[0]: {
        'application_number': row[0],
        'application_date': row[1],
        'publication': row[2],
        'bulletin_number': row[3],
        'applicant': row[4],
        'correspondence_address': row[5],
        'classes': row[6],
    } for row in rows}

    st.header(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ ({len(rows)} –∏–∑ –º–∞–∫—Å–∏–º—É–º 100)")

    if not rows:
        st.info("–ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        cols_per_row = 3
        for i in range(0, len(rows), cols_per_row):
            cols = st.columns(cols_per_row)
            for col, row in zip(cols, rows[i:i+cols_per_row]):
                app_num = row[0]
                img_path = None
                for ext in ['jpg', 'png']:
                    path = os.path.join(IMAGES_FOLDER, f"{app_num}.{ext}")
                    if os.path.exists(path):
                        img_path = path
                        break
                with col:
                    if img_path:
                        if st.button(app_num, key=f"btn_{app_num}"):
                            show_application_card(all_apps[app_num])
                        st.image(img_path)
                    else:
                        st.write(f"üñº –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {app_num}")
                        if st.button(app_num, key=f"btn_{app_num}"):
                            show_application_card(all_apps[app_num])
